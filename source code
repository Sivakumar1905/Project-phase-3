<html lang="en">
 <head>
  <meta charset="utf-8" />
  <meta content="width=device-width, initial-scale=1" name="viewport" />
  <title>AI-Driven Movie Recommendations</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link
    href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css"
    rel="stylesheet"
  />
  <link
    href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;700&family=Roboto&display=swap"
    rel="stylesheet"
  />
  <style>
    body {
      font-family: "Roboto", sans-serif;
    }
    h1,
    h2,
    h3,
    h4 {
      font-family: "Montserrat", sans-serif;
    }
  </style>
 </head>
 <body class="bg-gray-50 min-h-screen flex flex-col">
  <header class="bg-white shadow-md sticky top-0 z-50">
   <div
     class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 flex items-center justify-between h-16"
   >
    <div class="flex items-center space-x-3">
     <img
       alt="Logo icon with letters AI in blue and white background"
       class="w-12 h-12"
       height="48"
       src="https://storage.googleapis.com/a1aa/image/83046dcd-4a70-46ab-ba90-1b1a49e06636.jpg"
       width="48"
     />
     <h1 class="text-2xl font-bold text-indigo-600">MovieMatch AI</h1>
    </div>
    <nav class="hidden md:flex space-x-8 font-semibold text-gray-700">
     <a class="hover:text-indigo-600 transition" href="#how-it-works">How It Works</a>
     <a class="hover:text-indigo-600 transition" href="#recommendations"
       >Recommendations</a
     >
     <a class="hover:text-indigo-600 transition" href="#contact">Contact</a>
    </nav>
    <button
      aria-label="Open menu"
      class="md:hidden text-gray-700 focus:outline-none focus:ring-2 focus:ring-indigo-600"
      id="mobile-menu-button"
    >
     <i class="fas fa-bars fa-lg"></i>
    </button>
   </div>
   <nav
     aria-label="Mobile menu"
     class="md:hidden hidden bg-white border-t border-gray-200"
     id="mobile-menu"
   >
    <a
      class="block px-4 py-3 text-gray-700 font-semibold hover:bg-indigo-50 hover:text-indigo-600"
      href="#how-it-works"
      >How It Works</a
    >
    <a
      class="block px-4 py-3 text-gray-700 font-semibold hover:bg-indigo-50 hover:text-indigo-600"
      href="#recommendations"
      >Recommendations</a
    >
    <a
      class="block px-4 py-3 text-gray-700 font-semibold hover:bg-indigo-50 hover:text-indigo-600"
      href="#contact"
      >Contact</a
    >
   </nav>
  </header>
  <main class="flex-grow">
   <section
     class="bg-gradient-to-r from-indigo-600 to-indigo-400 text-white py-20 px-6 sm:px-12 md:px-20 text-center"
   >
    <h2
      class="text-4xl sm:text-5xl font-extrabold max-w-4xl mx-auto leading-tight"
    >
     Delivering Personalized Movie Recommendations with an AI-Driven
     Matchmaking System
    </h2>
    <p class="mt-6 text-lg max-w-3xl mx-auto">
     Discover movies tailored just for you. Our AI analyzes your preferences
     and matches you with films you'll love.
    </p>
    <button
      class="inline-block mt-10 bg-white text-indigo-600 font-semibold px-8 py-3 rounded-lg shadow-lg hover:bg-indigo-50 transition"
      id="start-btn"
    >
     Get Your Recommendations
    </button>
   </section>
   <section
     class="max-w-7xl mx-auto px-6 sm:px-12 md:px-20 py-16"
     id="how-it-works"
   >
    <h3 class="text-3xl font-bold text-center text-indigo-700 mb-12">How It Works</h3>
    <div class="grid grid-cols-1 md:grid-cols-3 gap-12">
     <div
       class="bg-white rounded-lg shadow-lg p-8 flex flex-col items-center text-center"
     >
      <img
        alt="Illustration of a user profile with preferences and movie genres icons around"
        class="mb-6"
        height="120"
        src="https://storage.googleapis.com/a1aa/image/ba849d85-6786-4f92-0818-a786eebfa2c1.jpg"
        width="120"
      />
      <h4 class="text-xl font-semibold mb-3 text-indigo-600">
       Step 1: Tell Us About You
      </h4>
      <p class="text-gray-700">
       Share your favorite genres, actors, and movies to help our AI
       understand your taste.
      </p>
     </div>
     <div
       class="bg-white rounded-lg shadow-lg p-8 flex flex-col items-center text-center"
     >
      <img
        alt="Illustration of AI brain analyzing movie data with charts and graphs"
        class="mb-6"
        height="120"
        src="https://storage.googleapis.com/a1aa/image/2b5089e9-5554-4538-57af-1a07e5bf0753.jpg"
        width="120"
      />
      <h4 class="text-xl font-semibold mb-3 text-indigo-600">Step 2: AI Matchmaking</h4>
      <p class="text-gray-700">
       Our AI analyzes your preferences against thousands of movies to find
       the perfect matches.
      </p>
     </div>
     <div
       class="bg-white rounded-lg shadow-lg p-8 flex flex-col items-center text-center"
     >
      <img
        alt="Illustration of a person watching movies on a laptop with popcorn and cozy setting"
        class="mb-6"
        height="120"
        src="https://storage.googleapis.com/a1aa/image/40d0d568-5c89-4989-9cea-d9a9f3dee47b.jpg"
        width="120"
      />
      <h4 class="text-xl font-semibold mb-3 text-indigo-600">Step 3: Enjoy Your Picks</h4>
      <p class="text-gray-700">
       Receive personalized recommendations and enjoy movies that truly
       resonate with you.
      </p>
     </div>
    </div>
   </section>
   <section
     class="bg-indigo-50 py-16 px-6 sm:px-12 md:px-20 max-w-7xl mx-auto rounded-lg"
     id="recommendations"
   >
    <h3 class="text-3xl font-bold text-indigo-700 mb-12 text-center">
     Your Personalized Recommendations
    </h3>
    <div
      class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-8"
      id="recommendations-list"
    >
     <!-- Recommendations will be injected here -->
    </div>
   </section>
   <section
     class="bg-indigo-600 text-white py-16 px-6 sm:px-12 md:px-20 max-w-7xl mx-auto rounded-lg mb-20"
     id="contact"
   >
    <h3 class="text-3xl font-bold mb-8 text-center">Get in Touch</h3>
    <form
      class="max-w-3xl mx-auto space-y-6"
      id="contact-form"
      method="POST"
      novalidate
    >
     <div>
      <label class="block mb-2 font-semibold" for="name">Name</label>
      <input
        class="w-full rounded-md px-4 py-3 text-gray-900 focus:outline-none focus:ring-2 focus:ring-indigo-300"
        id="name"
        name="name"
        placeholder="Your full name"
        required
        type="text"
      />
      <p class="text-red-400 text-sm mt-1 hidden" id="name-error">
       Please enter your name.
      </p>
     </div>
     <div>
      <label class="block mb-2 font-semibold" for="email">Email</label>
      <input
        class="w-full rounded-md px-4 py-3 text-gray-900 focus:outline-none focus:ring-2 focus:ring-indigo-300"
        id="email"
        name="email"
        placeholder="you@example.com"
        required
        type="email"
      />
      <p class="text-red-400 text-sm mt-1 hidden" id="email-error">
       Please enter a valid email.
      </p>
     </div>
     <div>
      <label class="block mb-2 font-semibold" for="message">Message</label>
      <textarea
        class="w-full rounded-md px-4 py-3 text-gray-900 focus:outline-none focus:ring-2 focus:ring-indigo-300"
        id="message"
        name="message"
        placeholder="Write your message here..."
        required
        rows="5"
      ></textarea>
      <p class="text-red-400 text-sm mt-1 hidden" id="message-error">
       Please enter a message.
      </p>
     </div>
     <button
       class="bg-white text-indigo-600 font-bold px-8 py-3 rounded-lg w-full hover:bg-indigo-50 transition"
       type="submit"
     >
      Send Message
     </button>
     <p class="text-green-400 text-center font-semibold mt-4 hidden" id="form-success">
      Thank you for contacting us! We'll get back to you soon.
     </p>
    </form>
   </section>
  </main>
  <footer class="bg-white border-t border-gray-200 py-6">
   <div
     class="max-w-7xl mx-auto px-6 sm:px-12 md:px-20 flex flex-col md:flex-row justify-between items-center text-gray-600 text-sm"
   >
    <p>Â© 2024 MovieMatch AI. All rights reserved.</p>
    <div class="flex space-x-6 mt-4 md:mt-0">
     <a aria-label="Facebook" class="hover:text-indigo-600 transition" href="#">
      <i class="fab fa-facebook fa-lg"></i>
     </a>
     <a aria-label="Twitter" class="hover:text-indigo-600 transition" href="#">
      <i class="fab fa-twitter fa-lg"></i>
     </a>
     <a aria-label="Instagram" class="hover:text-indigo-600 transition" href="#">
      <i class="fab fa-instagram fa-lg"></i>
     </a>
     <a aria-label="LinkedIn" class="hover:text-indigo-600 transition" href="#">
      <i class="fab fa-linkedin fa-lg"></i>
     </a>
    </div>
   </div>
  </footer>
  <script>
   // Mobile menu toggle
    const mobileMenuButton = document.getElementById("mobile-menu-button");
    const mobileMenu = document.getElementById("mobile-menu");
    mobileMenuButton.addEventListener("click", () => {
      mobileMenu.classList.toggle("hidden");
    });

    // TMDb API key (replace with your own key)
    const TMDB_API_KEY = "a3f3f3a1a1a1a1a1a1a1a1a1a1a1a1a1"; // placeholder, replace with your real TMDb API key

    // TMDb API base URLs
    const TMDB_API_BASE = "https://api.themoviedb.org/3";
    const TMDB_IMAGE_BASE = "https://image.tmdb.org/t/p/w500";

    // User preferences form modal
    const startBtn = document.getElementById("start-btn");

    // Create modal elements
    const modalOverlay = document.createElement("div");
    modalOverlay.className =
      "fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden";

    const modal = document.createElement("div");
    modal.className =
      "bg-white rounded-lg shadow-lg max-w-lg w-full p-8 relative max-h-[90vh] overflow-y-auto";

    // Close button
    const closeBtn = document.createElement("button");
    closeBtn.className =
      "absolute top-4 right-4 text-gray-600 hover:text-indigo-600 focus:outline-none";
    closeBtn.setAttribute("aria-label", "Close preferences form");
    closeBtn.innerHTML = '<i class="fas fa-times fa-lg"></i>';

    // Form title
    const modalTitle = document.createElement("h3");
    modalTitle.className = "text-2xl font-bold mb-6 text-indigo-700 text-center";
    modalTitle.textContent = "Tell Us About Your Movie Preferences";

    // Form element
    const form = document.createElement("form");
    form.id = "preferences-form";
    form.className = "space-y-6";

    // Genres input (checkboxes)
    const genres = [
      "Action",
      "Adventure",
      "Animation",
      "Comedy",
      "Crime",
      "Documentary",
      "Drama",
      "Family",
      "Fantasy",
      "History",
      "Horror",
      "Music",
      "Mystery",
      "Romance",
      "Science Fiction",
      "TV Movie",
      "Thriller",
      "War",
      "Western",
    ];

    const genresFieldset = document.createElement("fieldset");
    const genresLegend = document.createElement("legend");
    genresLegend.className = "font-semibold mb-2";
    genresLegend.textContent = "Select your favorite genres (at least one):";
    genresFieldset.appendChild(genresLegend);

    const genresContainer = document.createElement("div");
    genresContainer.className =
      "grid grid-cols-2 sm:grid-cols-3 gap-2 max-h-48 overflow-y-auto";

    genres.forEach((genre) => {
      const label = document.createElement("label");
      label.className = "inline-flex items-center space-x-2 cursor-pointer";

      const checkbox = document.createElement("input");
      checkbox.type = "checkbox";
      checkbox.name = "genres";
      checkbox.value = genre;
      checkbox.className = "form-checkbox h-5 w-5 text-indigo-600";

      const span = document.createElement("span");
      span.textContent = genre;

      label.appendChild(checkbox);
      label.appendChild(span);
      genresContainer.appendChild(label);
    });

    genresFieldset.appendChild(genresContainer);

    // Actors input (text, comma separated)
    const actorsDiv = document.createElement("div");
    const actorsLabel = document.createElement("label");
    actorsLabel.setAttribute("for", "actors");
    actorsLabel.className = "block mb-2 font-semibold";
    actorsLabel.textContent = "Favorite actors (comma separated):";
    const actorsInput = document.createElement("input");
    actorsInput.type = "text";
    actorsInput.id = "actors";
    actorsInput.name = "actors";
    actorsInput.placeholder = "e.g. Tom Hanks, Scarlett Johansson";
    actorsInput.className =
      "w-full rounded-md px-4 py-3 text-gray-900 focus:outline-none focus:ring-2 focus:ring-indigo-300";

    actorsDiv.appendChild(actorsLabel);
    actorsDiv.appendChild(actorsInput);

    // Movies input (text, comma separated)
    const moviesDiv = document.createElement("div");
    const moviesLabel = document.createElement("label");
    moviesLabel.setAttribute("for", "movies");
    moviesLabel.className = "block mb-2 font-semibold";
    moviesLabel.textContent = "Favorite movies (comma separated):";
    const moviesInput = document.createElement("input");
    moviesInput.type = "text";
    moviesInput.id = "movies";
    moviesInput.name = "movies";
    moviesInput.placeholder = "e.g. Inception, The Matrix";
    moviesInput.className =
      "w-full rounded-md px-4 py-3 text-gray-900 focus:outline-none focus:ring-2 focus:ring-indigo-300";

    moviesDiv.appendChild(moviesLabel);
    moviesDiv.appendChild(moviesInput);

    // Submit button
    const submitBtn = document.createElement("button");
    submitBtn.type = "submit";
    submitBtn.className =
      "bg-indigo-600 text-white font-bold px-6 py-3 rounded-lg w-full hover:bg-indigo-700 transition";
    submitBtn.textContent = "Find My Movies";

    // Append all to form
    form.appendChild(genresFieldset);
    form.appendChild(actorsDiv);
    form.appendChild(moviesDiv);
    form.appendChild(submitBtn);

    // Append close button, title, form to modal
    modal.appendChild(closeBtn);
    modal.appendChild(modalTitle);
    modal.appendChild(form);

    // Append modal to overlay
    modalOverlay.appendChild(modal);

    // Append overlay to body
    document.body.appendChild(modalOverlay);

    // Show modal on button click
    startBtn.addEventListener("click", () => {
      modalOverlay.classList.remove("hidden");
      form.reset();
      clearRecommendations();
    });

    // Close modal on close button click or overlay click (outside modal)
    closeBtn.addEventListener("click", () => {
      modalOverlay.classList.add("hidden");
    });
    modalOverlay.addEventListener("click", (e) => {
      if (e.target === modalOverlay) {
        modalOverlay.classList.add("hidden");
      }
    });

    // Accessibility: close modal on Escape key
    document.addEventListener("keydown", (e) => {
      if (e.key === "Escape" && !modalOverlay.classList.contains("hidden")) {
        modalOverlay.classList.add("hidden");
      }
    });

    // Recommendations container
    const recommendationsList = document.getElementById("recommendations-list");

    // Clear recommendations
    function clearRecommendations() {
      recommendationsList.innerHTML = "";
    }

    // Render recommendations
    function renderRecommendations(movies) {
      clearRecommendations();
      if (movies.length === 0) {
        recommendationsList.innerHTML =
          '<p class="text-center text-gray-600 col-span-full">No recommendations found based on your preferences. Try adjusting your selections.</p>';
        return;
      }
      movies.forEach((movie) => {
        const article = document.createElement("article");
        article.className =
          "bg-white rounded-lg shadow-md overflow-hidden flex flex-col";

        const img = document.createElement("img");
        img.src = movie.poster;
        img.alt = movie.title + " movie poster";
        img.className = "w-full h-72 object-cover";
        img.width = 400;
        img.height = 600;

        const div = document.createElement("div");
        div.className = "p-4 flex flex-col flex-grow";

        const h4 = document.createElement("h4");
        h4.className = "text-lg font-semibold text-indigo-800 mb-1";
        h4.textContent = movie.title;

        const p = document.createElement("p");
        p.className = "text-gray-600 flex-grow";
        p.textContent = movie.overview || "No description available.";

        const ratingDiv = document.createElement("div");
        ratingDiv.className = "mt-4 flex items-center space-x-2 text-yellow-400";

        // Stars
        const rating = movie.vote_average || 0;
        const fullStars = Math.floor(rating / 2);
        const halfStar = rating % 2 >= 1;
        const emptyStars = 5 - fullStars - (halfStar ? 1 : 0);

        for (let i = 0; i < fullStars; i++) {
          const star = document.createElement("i");
          star.className = "fas fa-star";
          ratingDiv.appendChild(star);
        }
        if (halfStar) {
          const half = document.createElement("i");
          half.className = "fas fa-star-half-alt";
          ratingDiv.appendChild(half);
        }
        for (let i = 0; i < emptyStars; i++) {
          const empty = document.createElement("i");
          empty.className = "far fa-star";
          ratingDiv.appendChild(empty);
        }

        const ratingSpan = document.createElement("span");
        ratingSpan.className = "text-gray-500 ml-2";
        ratingSpan.textContent = `(${rating.toFixed(1)})`;
        ratingDiv.appendChild(ratingSpan);

        div.appendChild(h4);
        div.appendChild(p);
        div.appendChild(ratingDiv);

        article.appendChild(img);
        article.appendChild(div);

        recommendationsList.appendChild(article);
      });
    }

    // Helper: fetch JSON with error handling
    async function fetchJson(url) {
      const res = await fetch(url);
      if (!res.ok) throw new Error(`HTTP error! status: ${res.status}`);
      return res.json();
    }

    // TMDb API helper functions
    async function searchPerson(name) {
      const url = `${TMDB_API_BASE}/search/person?api_key=${TMDB_API_KEY}&query=${encodeURIComponent(
        name
      )}&include_adult=false`;
      const data = await fetchJson(url);
      return data.results.length > 0 ? data.results[0].id : null;
    }

    async function searchMovie(title) {
      const url = `${TMDB_API_BASE}/search/movie?api_key=${TMDB_API_KEY}&query=${encodeURIComponent(
        title
      )}&include_adult=false`;
      const data = await fetchJson(url);
      return data.results.length > 0 ? data.results[0].id : null;
    }

    async function getMoviesByGenre(genreId, page = 1) {
      const url = `${TMDB_API_BASE}/discover/movie?api_key=${TMDB_API_KEY}&with_genres=${genreId}&page=${page}&sort_by=popularity.desc&include_adult=false`;
      const data = await fetchJson(url);
      return data.results;
    }

    async function getGenreList() {
      const url = `${TMDB_API_BASE}/genre/movie/list?api_key=${TMDB_API_KEY}`;
      const data = await fetchJson(url);
      return data.genres; // array of {id, name}
    }

    async function getMoviesByActor(actorId, page = 1) {
      const url = `${TMDB_API_BASE}/discover/movie?api_key=${TMDB_API_KEY}&with_cast=${actorId}&page=${page}&sort_by=popularity.desc&include_adult=false`;
      const data = await fetchJson(url);
      return data.results;
    }

    async function getMovieDetails(movieId) {
      const url = `${TMDB_API_BASE}/movie/${movieId}?api_key=${TMDB_API_KEY}`;
      const data = await fetchJson(url);
      return data;
    }

    // Map genre names to TMDb genre IDs
    let genreMap = {};
    async function loadGenreMap() {
      const genres = await getGenreList();
      genreMap = {};
      genres.forEach((g) => {
        genreMap[g.name.toLowerCase()] = g.id;
      });
    }

    // AI matchmaking logic using TMDb data
    async function matchMovies(preferences) {
      const { genres, actors, movies: favMovies } = preferences;

      // Map genre names to IDs
      const genreIds = genres
        .map((g) => genreMap[g.toLowerCase()])
        .filter((id) => id !== undefined);

      // Search actor IDs
      const actorIds = [];
      for (const actorName of actors) {
        const id = await searchPerson(actorName);
        if (id) actorIds.push(id);
      }

      // Search favorite movie IDs
      const favMovieIds = [];
      for (const movieTitle of favMovies) {
        const id = await searchMovie(movieTitle);
        if (id) favMovieIds.push(id);
      }

      // Collect movies from genres
      let genreMovies = [];
      for (const genreId of genreIds) {
        const moviesByGenre = await getMoviesByGenre(genreId);
        genreMovies = genreMovies.concat(moviesByGenre);
      }

      // Collect movies from actors
      let actorMovies = [];
      for (const actorId of actorIds) {
        const moviesByActor = await getMoviesByActor(actorId);
        actorMovies = actorMovies.concat(moviesByActor);
      }

      // Combine and score movies
      const movieScores = new Map();

      function addOrUpdateMovie(movie, score) {
        if (!movieScores.has(movie.id)) {
          movieScores.set(movie.id, { movie, score });
        } else {
          movieScores.get(movie.id).score += score;
        }
      }

      // Score genre movies +3
      genreMovies.forEach((m) => addOrUpdateMovie(m, 3));

      // Score actor movies +4
      actorMovies.forEach((m) => addOrUpdateMovie(m, 4));

      // Score favorite movies +5
      for (const favId of favMovieIds) {
        if (movieScores.has(favId)) {
          movieScores.get(favId).score += 5;
        } else {
          // Fetch details for fav movie if not in lists
          try {
            const favMovie = await getMovieDetails(favId);
            addOrUpdateMovie(favMovie, 5);
          } catch {}
        }
      }

      // Convert map to array and sort by score and popularity
      const scoredMovies = Array.from(movieScores.values());
      scoredMovies.sort((a, b) => {
        if (b.score !== a.score) return b.score - a.score;
        return (b.movie.popularity || 0) - (a.movie.popularity || 0);
      });

      // Remove duplicates by movie ID and limit to top 12
      const uniqueMovies = [];
      const seenIds = new Set();
      for (const entry of scoredMovies) {
        if (!seenIds.has(entry.movie.id)) {
          seenIds.add(entry.movie.id);
          uniqueMovies.push(entry.movie);
        }
        if (uniqueMovies.length >= 12) break;
      }

      // Map poster paths to full URLs
      uniqueMovies.forEach((m) => {
        m.poster = m.poster_path
          ? TMDB_IMAGE_BASE + m.poster_path
          : "https://placehold.co/400x600/png?text=No+Image";
      });

      return uniqueMovies;
    }

    // Handle preferences form submission
    form.addEventListener("submit", async (e) => {
      e.preventDefault();

      // Get selected genres
      const selectedGenres = Array.from(
        form.querySelectorAll('input[name="genres"]:checked')
      ).map((input) => input.value);

      if (selectedGenres.length === 0) {
        alert("Please select at least one genre.");
        return;
      }

      // Get actors and movies input, split by comma, trim whitespace, filter empty
      const actorsInputVal = actorsInput.value
        .split(",")
        .map((a) => a.trim())
        .filter((a) => a.length > 0);

      const moviesInputVal = moviesInput.value
        .split(",")
        .map((m) => m.trim())
        .filter((m) => m.length > 0);

      const preferences = {
        genres: selectedGenres,
        actors: actorsInputVal,
        movies: moviesInputVal,
      };

      submitBtn.disabled = true;
      submitBtn.textContent = "Finding movies...";

      try {
        const recommendations = await matchMovies(preferences);
        renderRecommendations(recommendations);
        modalOverlay.classList.add("hidden");
        document
          .getElementById("recommendations")
          .scrollIntoView({ behavior: "smooth" });
      } catch (error) {
        alert(
          "Sorry, there was an error fetching recommendations. Please try again."
        );
        console.error(error);
      } finally {
        submitBtn.disabled = false;
        submitBtn.textContent = "Find My Movies";
      }
    });

    // Load genre map on page load
    loadGenreMap();

    // Contact form validation and submission simulation
    const contactForm = document.getElementById("contact-form");
    const nameInput = contactForm.querySelector("#name");
    const emailInput = contactForm.querySelector("#email");
    const messageInput = contactForm.querySelector("#message");
    const nameError = document.getElementById("name-error");
    const emailError = document.getElementById("email-error");
    const messageError = document.getElementById("message-error");
    const formSuccess = document.getElementById("form-success");

    function validateEmail(email) {
      return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
    }

    contactForm.addEventListener("submit", (e) => {
      e.preventDefault();

      let valid = true;

      if (nameInput.value.trim() === "") {
        nameError.classList.remove("hidden");
        valid = false;
      } else {
        nameError.classList.add("hidden");
      }

      if (!validateEmail(emailInput.value.trim())) {
        emailError.classList.remove("hidden");
        valid = false;
      } else {
        emailError.classList.add("hidden");
      }

      if (messageInput.value.trim() === "") {
        messageError.classList.remove("hidden");
        valid = false;
      } else {
        messageError.classList.add("hidden");
      }

      if (!valid) return;

      formSuccess.classList.remove("hidden");
      contactForm.reset();

      setTimeout(() => {
        formSuccess.classList.add("hidden");
      }, 5000);
    });
  </script>
 </body>
</html>
